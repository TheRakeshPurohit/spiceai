name: E2E Test CLI behavior
on:
  workflow_dispatch:
    inputs:
        build_cli:
          description: 'Build the CLI instead of using the specified release version'
          required: false
          default: 'true'
        rel_version:
          description: 'The version to build CLI / download released CLI'
          required: false
          default: '1.0.2'

jobs:
  setup-matrix:
    name: Setup strategy matrix
    runs-on: spiceai-runners
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.result }}

    steps:
      - name: Set up matrix
        uses: actions/github-script@v7
        id: setup-matrix
        with:
          script: |
            const matrix = [
              {
                name: "Linux x64",
                runner: "spiceai-runners",
                target_os: "linux",
                target_arch: "x86_64",
                target_arch_go: "amd64",
              }, {
                name: "macOS aarch64 (Apple Silicon)",
                runner: "macos-14",
                target_os: "darwin",
                target_arch: "aarch64",
                target_arch_go: "arm64",
              }, {
                name: "Windows x64",
                runner: "windows-latest",
                target_os: "windows",
                target_arch: "x86_64",
                target_arch_go: "amd64",
              }
            ];
            return matrix;
            
  build:
    name: Build ${{ matrix.target.name }} CLI
    if: ${{ github.event.inputs.build_cli == 'true' || github.event.inputs.build_cli == null }}
    runs-on: ${{ matrix.target.runner }}
    needs: setup-matrix
    env:
      GOVER: 1.23.4
      GOOS: ${{ matrix.target.target_os }}
      GOARCH: ${{ matrix.target.target_arch_go }}
      REL_VERSION: ${{ github.event.inputs.rel_version || '1.0.2' }}
    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}

      - name: Set up make
        if: matrix.target.target_os == 'linux'
        uses: ./.github/actions/setup-make

      - name: Build spice
        run: make -C bin/spice

      - name: Make spice executable & Move spice (Unix)
        if: matrix.target.target_os != 'windows'
        run: |
          mv target/release/spice spice
          chmod +x spice
      
      - name: Move Spice(Windows)
        if: matrix.target.target_os == 'windows'
        shell: pwsh
        run: |
          Move-Item -Path target/release/spice.exe -Destination spice.exe -Force

      - name: Save spice artifact
        if: matrix.target.target_os != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: |
            spice

      - name: Save spice artifact
        if: matrix.target.target_os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: |
            spice.exe

  test_spice_upgrade_with_runtime:
    name: 'Test spice upgrade (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    continue-on-error: true
    runs-on: ${{ matrix.target.runner }}
    env:
      REL_VERSION: ${{ github.event.inputs.rel_version || '1.0.2' }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - build
      - setup-matrix
    timeout-minutes: 5

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        if: github.event.inputs.build_cli != 'false'
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build
      
      - name: download spice cli released version
        if: github.event.inputs.build_cli == 'false' && matrix.target.target_os != 'windows'
        run: |
          mkdir -p ./build
          cd ./build
          url="https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spice_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz"
          output="spice.tar.gz"
          curl -L -o "$output" "$url"
          tar -xzf "$output"
          rm "$output"
          chmod +x spice
      
      - name: download spice cli released version
        if: github.event.inputs.build_cli == 'false' && matrix.target.target_os == 'windows'
        run: |
          New-Item -ItemType Directory -Force -Path "./build" > $null
          Set-Location "./build"
          $url = "https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spice.exe_windows_x86_64.tar.gz"
          $output = "spice.exe_windows_x86_64.tar.gz"
          Invoke-WebRequest -Uri $url -OutFile $output
          tar -xzf $output
          Remove-Item $output
      
      - name: Download a older spiced
        shell: pwsh
        if: matrix.target.target_os == 'windows'
        run: |
          Set-Location "./build"
          $url = "https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spiced.exe_windows_x86_64.tar.gz"
          $output = "spiced.exe_windows_x86_64.tar.gz"
          Invoke-WebRequest -Uri $url -OutFile $output
          tar -xzf $output
          Remove-Item $output

      - name: Download older spiced
        if: matrix.target.target_os != 'windows'
        run: |
          cd ./build
          url="https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spiced_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz"
          output="spiced.tar.gz"
          curl -L -o "$output" "$url"
          tar -xzf "$output"
          rm "$output"
          chmod +x spiced

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-path: ./build

      - name: Run spice upgrade
        run: |
          spice upgrade
      
      - name: Check the temp directory (Windows)
        if: matrix.target.target_os == 'windows'
        run: |
          Write-Host "System temp directory: $env:TEMP"
          Get-ChildItem -Path $env:TEMP -Recurse | 
              Where-Object { $_.Name -like "spice*" } | 
              Select-Object FullName, Length, LastWriteTime | 
              Format-Table -AutoSize

      - name: Run spice upgrade again
        if: matrix.target.target_os == 'windows'
        run: |
          spice upgrade

      - name: Check the temp directory (Windows)
        if: matrix.target.target_os == 'windows'
        run: |
          Write-Host "System temp directory: $env:TEMP"
          Get-ChildItem -Path $env:TEMP -Recurse | 
              Where-Object { $_.Name -like "spice*" } | 
              Select-Object FullName, Length, LastWriteTime | 
              Format-Table -AutoSize


  test_spice_upgrade_without_runtime:
    name: 'Test spice upgrade without runtime (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    continue-on-error: true
    runs-on: ${{ matrix.target.runner }}
    env:
      REL_VERSION: ${{ github.event.inputs.rel_version || '1.0.2' }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - build
      - setup-matrix
    timeout-minutes: 5

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        if: github.event.inputs.build_cli != 'false'
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: download spice cli released version
        if: github.event.inputs.build_cli == 'false' && matrix.target.target_os != 'windows'
        run: |
          mkdir -p ./build
          cd ./build
          url="https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spice_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}.tar.gz"
          output="spice.tar.gz"
          curl -L -o "$output" "$url"
          tar -xzf "$output"
          rm "$output"
          chmod +x spice
      
      - name: download spice cli released version
        if: github.event.inputs.build_cli == 'false' && matrix.target.target_os == 'windows'
        run: |
          New-Item -ItemType Directory -Force -Path "./build" > $null 
          Set-Location "./build"
          $url = "https://github.com/spiceai/spiceai/releases/download/v${{ env.REL_VERSION }}/spice.exe_windows_x86_64.tar.gz"
          $output = "spice.exe_windows_x86_64.tar.gz"
          Invoke-WebRequest -Uri $url -OutFile $output
          tar -xzf $output
          Remove-Item $output

      - name: Install Spice CLI
        uses: ./.github/actions/install-spice-cli
        with:
          build-path: ./build

      - name: Run spice upgrade
        run: |
          spice upgrade
      
      - name: Check the temp directory (Windows)
        if: matrix.target.target_os == 'windows'
        run: |
          Write-Host "System temp directory: $env:TEMP"
          Get-ChildItem -Path $env:TEMP -Recurse | 
              Where-Object { $_.Name -like "spice*" } | 
              Select-Object FullName, Length, LastWriteTime | 
              Format-Table -AutoSize

      - name: Run spice upgrade again
        if: matrix.target.target_os == 'windows'
        run: |
          spice upgrade

      - name: Check the temp directory (Windows)
        if: matrix.target.target_os == 'windows'
        run: |
          Write-Host "System temp directory: $env:TEMP"
          Get-ChildItem -Path $env:TEMP -Recurse | 
              Where-Object { $_.Name -like "spice*" } | 
              Select-Object FullName, Length, LastWriteTime | 
              Format-Table -AutoSize